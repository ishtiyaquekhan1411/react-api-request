{"ast":null,"code":"var _jsxFileName = \"/home/deq/react-training/udemy/api-request/src/App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\nimport useHttp from './hooks/use-http';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const {\n    isLoading,\n    error,\n    sendRequest: fetchMovies\n  } = useHttp();\n  const fetchRequestConfig = {\n    url: 'https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json'\n  };\n\n  const transfromMoviesData = data => {\n    const loadedMovies = [];\n\n    for (const key in data) {\n      console.log(key);\n      loadedMovies.push({\n        id: key,\n        title: data[key].title,\n        openingText: data[key].openingText,\n        releaseDate: data[key].releaseDate\n      });\n    }\n\n    setMovies(loadedMovies);\n  }; // const fetchMoviesHandler = useCallback(async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch('https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json');\n  //     if (!response.ok) {\n  //       throw new Error('Something went wrong!');\n  //     }\n  //     const data = await response.json();\n  //     const loadedMovies = [];\n  //     for (const key in data) {\n  //       console.log(key);\n  //       loadedMovies.push({\n  //         id: key,\n  //         title: data[key].title,\n  //         openingText: data[key].openingText,\n  //         releaseDate: data[key].releaseDate\n  //       });\n  //     }\n  //     setMovies(loadedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }, []);\n\n\n  useEffect(() => {\n    fetchMovies(fetchRequestConfig, transfromMoviesData);\n  }, [fetchRequestConfig.fetchMovies]); // async function addMovieHandler(movie) {\n  //   try {\n  //     const response = await fetch('https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json', {\n  //       method: 'POST',\n  //       body: JSON.stringify(movie),\n  //       header: {\n  //         'Content-Type': 'application/json'\n  //       }\n  //     });\n  //     if (!response.ok) {\n  //       throw new Error('Unable to add new movie');\n  //     }\n  //     const data = await response.json();\n  //     setMovies(prevState => (\n  //       [\n  //         ...prevState,\n  //         {\n  //           id: data['name'],\n  //           title: movie.title,\n  //           openingText: movie.openingText,\n  //           releaseDate: movie.releaseDate\n  //         }]\n  //     ))\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  // }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMovies.bind(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/deq/react-training/udemy/api-request/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","useHttp","App","movies","setMovies","isLoading","error","sendRequest","fetchMovies","fetchRequestConfig","url","transfromMoviesData","data","loadedMovies","key","console","log","push","id","title","openingText","releaseDate","content","length","bind"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,WAArC,QAAwD,OAAxD;AAEA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAO,WAAP;AACA,OAAOC,OAAP,MAAoB,kBAApB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAACS,IAAAA,SAAD;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,WAAW,EAAEC;AAAhC,MAA+CP,OAAO,EAA5D;AACA,QAAMQ,kBAAkB,GAAG;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B;;AACA,QAAMC,mBAAmB,GAAIC,IAAD,IAAU;AACpC,UAAMC,YAAY,GAAG,EAArB;;AAEA,SAAK,MAAMC,GAAX,IAAkBF,IAAlB,EAAwB;AACtBG,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAD,MAAAA,YAAY,CAACI,IAAb,CAAkB;AAChBC,QAAAA,EAAE,EAAEJ,GADY;AAEhBK,QAAAA,KAAK,EAAEP,IAAI,CAACE,GAAD,CAAJ,CAAUK,KAFD;AAGhBC,QAAAA,WAAW,EAAER,IAAI,CAACE,GAAD,CAAJ,CAAUM,WAHP;AAIhBC,QAAAA,WAAW,EAAET,IAAI,CAACE,GAAD,CAAJ,CAAUO;AAJP,OAAlB;AAMD;;AACDjB,IAAAA,SAAS,CAACS,YAAD,CAAT;AACD,GAbD,CAJa,CAkBb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEAhB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,WAAW,CAACC,kBAAD,EAAqBE,mBAArB,CAAX;AACD,GAFQ,EAEN,CAACF,kBAAkB,CAAED,WAArB,CAFM,CAAT,CA9Ca,CAkDb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAIc,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAd;;AAEA,MAAInB,MAAM,CAACoB,MAAP,GAAgB,CAApB,EAAuB;AACrBD,IAAAA,OAAO,gBAAG,oBAAC,UAAD;AAAY,MAAA,MAAM,EAAEnB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AACD;;AAED,MAAIG,KAAJ,EAAW;AACTgB,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIhB,KAAJ,CAAV;AACD;;AAED,MAAID,SAAJ,EAAe;AACbiB,IAAAA,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAV;AACD;;AAED,sBACE,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEd,WAAW,CAACgB,IAAZ,CAAiB,IAAjB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,CAJF,eAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAUF,OAAV,CAPF,CADF;AAWD;;AAED,eAAepB,GAAf","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\nimport useHttp from './hooks/use-http';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const {isLoading, error, sendRequest: fetchMovies} = useHttp();\n  const fetchRequestConfig = { url: 'https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json' }\n  const transfromMoviesData = (data) => {\n    const loadedMovies = [];\n\n    for (const key in data) {\n      console.log(key);\n      loadedMovies.push({\n        id: key,\n        title: data[key].title,\n        openingText: data[key].openingText,\n        releaseDate: data[key].releaseDate\n      });\n    }\n    setMovies(loadedMovies);\n  }\n  // const fetchMoviesHandler = useCallback(async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch('https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json');\n  //     if (!response.ok) {\n  //       throw new Error('Something went wrong!');\n  //     }\n\n  //     const data = await response.json();\n  //     const loadedMovies = [];\n\n  //     for (const key in data) {\n  //       console.log(key);\n  //       loadedMovies.push({\n  //         id: key,\n  //         title: data[key].title,\n  //         openingText: data[key].openingText,\n  //         releaseDate: data[key].releaseDate\n  //       });\n  //     }\n  //     setMovies(loadedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }, []);\n\n  useEffect(() => {\n    fetchMovies(fetchRequestConfig, transfromMoviesData);\n  }, [fetchRequestConfig. fetchMovies]);\n\n  // async function addMovieHandler(movie) {\n  //   try {\n  //     const response = await fetch('https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json', {\n  //       method: 'POST',\n  //       body: JSON.stringify(movie),\n  //       header: {\n  //         'Content-Type': 'application/json'\n  //       }\n  //     });\n  //     if (!response.ok) {\n  //       throw new Error('Unable to add new movie');\n  //     }\n  //     const data = await response.json();\n  //     setMovies(prevState => (\n  //       [\n  //         ...prevState,\n  //         {\n  //           id: data['name'],\n  //           title: movie.title,\n  //           openingText: movie.openingText,\n  //           releaseDate: movie.releaseDate\n  //         }]\n  //     ))\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  // }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        {/* <AddMovie onAddMovie={addMovieHandler} /> */}\n      </section>\n      <section>\n        <button onClick={fetchMovies.bind(null, )}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}