{"ast":null,"code":"import { useState, useCallback } from 'react';\n\nconst useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const response = await fetch(requestConfig.url, {\n        method: requestConfig.method || 'GET',\n        body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n        header: requestConfig.header || {}\n      });\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (error) {\n      setError(error.message);\n    }\n\n    setIsLoading(false);\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest\n  };\n};\n\nexport default useHttp;","map":{"version":3,"sources":["/home/deq/react-training/udemy/api-request/src/hooks/use-http.js"],"names":["useState","useCallback","useHttp","isLoading","setIsLoading","error","setError","sendRequest","requestConfig","applyData","response","fetch","url","method","body","JSON","stringify","header","ok","Error","data","json","message"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,QAAsC,OAAtC;;AAEA,MAAMC,OAAO,GAAG,MAAM;AACpB,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,IAAD,CAAlC;AAEA,QAAMO,WAAW,GAAGN,WAAW,CAAC,OAAOO,aAAP,EAAsBC,SAAtB,KAAoC;AAClEL,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAE,IAAAA,QAAQ,CAAC,IAAD,CAAR;;AACA,QAAI;AACF,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAC1BH,aAAa,CAACI,GADY,EAE1B;AACEC,QAAAA,MAAM,EAAEL,aAAa,CAACK,MAAd,IAAwB,KADlC;AAEEC,QAAAA,IAAI,EAAEN,aAAa,CAACM,IAAd,GAAqBC,IAAI,CAACC,SAAL,CAAeR,aAAa,CAACM,IAA7B,CAArB,GAA0D,IAFlE;AAGEG,QAAAA,MAAM,EAAET,aAAa,CAACS,MAAd,IAAwB;AAHlC,OAF0B,CAA5B;;AASA,UAAI,CAACP,QAAQ,CAACQ,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAT,EAAnB;AACAZ,MAAAA,SAAS,CAACW,IAAD,CAAT;AACD,KAhBD,CAgBE,OAAOf,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAACD,KAAK,CAACiB,OAAP,CAAR;AACD;;AACDlB,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAvB8B,EAuB5B,EAvB4B,CAA/B;AAyBA,SAAO;AACLD,IAAAA,SADK;AAELE,IAAAA,KAFK;AAGLE,IAAAA;AAHK,GAAP;AAKD,CAlCD;;AAoCA,eAAeL,OAAf","sourcesContent":["import { useState, useCallback } from 'react';\n\nconst useHttp = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const sendRequest = useCallback(async (requestConfig, applyData) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        requestConfig.url,\n        {\n          method: requestConfig.method || 'GET',\n          body: requestConfig.body ? JSON.stringify(requestConfig.body) : null,\n          header: requestConfig.header || {}\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Something went wrong!');\n      }\n\n      const data = await response.json();\n      applyData(data);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  return {\n    isLoading,\n    error,\n    sendRequest,\n  };\n};\n\nexport default useHttp;"]},"metadata":{},"sourceType":"module"}