{"ast":null,"code":"var _jsxFileName = \"/home/deq/react-training/udemy/api-request/src/App.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\nimport useHttp from './hooks/use-http';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const {\n    isLoading,\n    error,\n    sendRequest: fetchMovies\n  } = useHttp();\n\n  const transfromMoviesData = data => {\n    const loadedMovies = [];\n\n    for (const key in data) {\n      console.log(key);\n      loadedMovies.push({\n        id: key,\n        title: data[key].title,\n        openingText: data[key].openingText,\n        releaseDate: data[key].releaseDate\n      });\n    }\n\n    setMovies(loadedMovies);\n  }; // const fetchMoviesHandler = useCallback(async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch('https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json');\n  //     if (!response.ok) {\n  //       throw new Error('Something went wrong!');\n  //     }\n  //     const data = await response.json();\n  //     const loadedMovies = [];\n  //     for (const key in data) {\n  //       console.log(key);\n  //       loadedMovies.push({\n  //         id: key,\n  //         title: data[key].title,\n  //         openingText: data[key].openingText,\n  //         releaseDate: data[key].releaseDate\n  //       });\n  //     }\n  //     setMovies(loadedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }, []);\n\n\n  useEffect(() => {\n    fetchMovies({\n      url: 'https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json'\n    }, transfromMoviesData);\n  }, [fetchMovies]);\n\n  async function addMovieHandler(movie) {\n    try {\n      const response = await fetch('https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json', {\n        method: 'POST',\n        body: JSON.stringify(movie),\n        header: {\n          'Content-Type': 'application/json'\n        }\n      });\n\n      if (!response.ok) {\n        throw new Error('Unable to add new movie');\n      }\n\n      const data = await response.json();\n      setMovies(prevState => [...prevState, {\n        id: data['name'],\n        title: movie.title,\n        openingText: movie.openingText,\n        releaseDate: movie.releaseDate\n      }]);\n    } catch (error) {\n      setError(error.message);\n    }\n  }\n\n  let content = /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 17\n    }\n  }, \"Found no movies.\");\n\n  if (movies.length > 0) {\n    content = /*#__PURE__*/React.createElement(MoviesList, {\n      movies: movies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    });\n  }\n\n  if (error) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 15\n      }\n    }, error);\n  }\n\n  if (isLoading) {\n    content = /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, \"Loading...\");\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AddMovie, {\n    onAddMovie: addMovieHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fetchMoviesHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"Fetch Movies\")), /*#__PURE__*/React.createElement(\"section\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }, content));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/deq/react-training/udemy/api-request/src/App.js"],"names":["React","useState","useEffect","useCallback","MoviesList","AddMovie","useHttp","App","movies","setMovies","isLoading","error","sendRequest","fetchMovies","transfromMoviesData","data","loadedMovies","key","console","log","push","id","title","openingText","releaseDate","url","addMovieHandler","movie","response","fetch","method","body","JSON","stringify","header","ok","Error","json","prevState","setError","message","content","length","fetchMoviesHandler"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\n\nimport MoviesList from './components/MoviesList';\nimport AddMovie from './components/AddMovie';\nimport './App.css';\nimport useHttp from './hooks/use-http';\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const {isLoading, error, sendRequest: fetchMovies} = useHttp();\n\n  const transfromMoviesData = (data) => {\n    const loadedMovies = [];\n\n    for (const key in data) {\n      console.log(key);\n      loadedMovies.push({\n        id: key,\n        title: data[key].title,\n        openingText: data[key].openingText,\n        releaseDate: data[key].releaseDate\n      });\n    }\n    setMovies(loadedMovies);\n  }\n  // const fetchMoviesHandler = useCallback(async () => {\n  //   setIsLoading(true);\n  //   setError(null);\n  //   try {\n  //     const response = await fetch('https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json');\n  //     if (!response.ok) {\n  //       throw new Error('Something went wrong!');\n  //     }\n\n  //     const data = await response.json();\n  //     const loadedMovies = [];\n\n  //     for (const key in data) {\n  //       console.log(key);\n  //       loadedMovies.push({\n  //         id: key,\n  //         title: data[key].title,\n  //         openingText: data[key].openingText,\n  //         releaseDate: data[key].releaseDate\n  //       });\n  //     }\n  //     setMovies(loadedMovies);\n  //   } catch (error) {\n  //     setError(error.message);\n  //   }\n  //   setIsLoading(false);\n  // }, []);\n\n  useEffect(() => {\n    fetchMovies(\n      { url: 'https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json' },\n      transfromMoviesData\n    );\n  }, [fetchMovies]);\n\n  async function addMovieHandler(movie) {\n    try {\n      const response = await fetch('https://react-http-7bb32-default-rtdb.firebaseio.com/movies.json', {\n        method: 'POST',\n        body: JSON.stringify(movie),\n        header: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('Unable to add new movie');\n      }\n      const data = await response.json();\n      setMovies(prevState => (\n        [\n          ...prevState,\n          {\n            id: data['name'],\n            title: movie.title,\n            openingText: movie.openingText,\n            releaseDate: movie.releaseDate\n          }]\n      ))\n    } catch (error) {\n      setError(error.message);\n    }\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}